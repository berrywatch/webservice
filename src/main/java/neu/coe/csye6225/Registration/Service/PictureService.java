package neu.coe.csye6225.Registration.Service;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import neu.coe.csye6225.Registration.Entity.Picture;
import neu.coe.csye6225.Registration.Entity.User;
import neu.coe.csye6225.Registration.Exception.PictureNotFoundException;
import neu.coe.csye6225.Registration.Repository.PictureRepository;
import neu.coe.csye6225.Registration.Repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.*;

@Service
public class PictureService {
    @Value("${webWorkDir}")
    private String work_dir;

    @Value("${bucketName}")
    private String bucket_name;

    @Autowired // to get the bean which is auto-generated by Spring
    private PictureRepository pictureRepository;

    private AmazonS3 s3 = AmazonS3ClientBuilder.standard().withRegion(Regions.US_EAST_1).build();

    public Picture postPicture(MultipartFile file, User u){
        String file_name = file.getOriginalFilename();
        String pic_id = String.valueOf(UUID.randomUUID());
        String upload_date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

        // delete all files first
        deleteObject(u);
        if(pictureRepository.findById(u.getUuid()).isPresent()){
            pictureRepository.deleteById(u.getUuid());
        }

        Picture pic = new Picture();
        pic.setPic_id(pic_id);
        pic.setFile_name(file_name);
        pic.setUrl(String.format("%s/%s/%s",bucket_name,u.getUuid(),file_name));
        pic.setUpload_date(upload_date);
        pic.setUu_id(u.getUuid());
        pictureRepository.save(pic);

        // upload to s3 bucket
        String file_path = new String(work_dir+file.getOriginalFilename());
        String key_name = new String(u.getUuid()+"/"+file_name);
        try {
            file.transferTo(new File(file_path));
            uploadObject(bucket_name, key_name, file_path);
            Process p = Runtime.getRuntime().exec("rm "+file_path);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return pic;
    }

    // if not found picture, throw exception
    public Picture getPicture(User u){
        Optional<Picture> picOpt = pictureRepository.findById(u.getUuid());
        if(!picOpt.isPresent()){
            throw new PictureNotFoundException();
        }
        return picOpt.get();
    }

    public void deletePicture(User u){
        if(getPicture(u)==null) return;
        pictureRepository.deleteById(u.getUuid());
        deleteObject(u);
    }

    // has to be in US_EAST_1 ...
    private void uploadObject(String bucket_name, String key_name, String file_path) {
        System.out.format("Uploading %s to S3 bucket %s...\n", file_path, bucket_name);
        try {
            s3.putObject(bucket_name, key_name, new File(file_path));
        } catch (AmazonServiceException e) {
            System.err.println(e.getErrorMessage());
        }
    }

    // delete all files attached to this user
    private void deleteObject(User u){
        List<S3ObjectSummary> list =  s3.listObjects(bucket_name,u.getUuid()).getObjectSummaries();
        for(S3ObjectSummary s3os: list){
            s3.deleteObject(bucket_name, s3os.getKey());
        }
    }

}
